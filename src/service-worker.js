// src/service-worker.js

const { precacheAndRoute } = require("workbox-precaching");
const { registerRoute } = require("workbox-routing");
const { StaleWhileRevalidate } = require("workbox-strategies");

// Precache all assets generated by the build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache API calls with StaleWhileRevalidate strategy
registerRoute(
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.startsWith("/assets/"),
  new StaleWhileRevalidate({
    cacheName: "assets-cache",
  })
);

// Skip waiting and activate new service worker immediately
self.addEventListener("install", (event) => {
  self.skipWaiting();
});

self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== "assets-cache") {
            return caches.delete(cache);
          }
        })
      );
    })
  );
  self.clients.claim();
});

self.addEventListener("fetch", (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      return response || fetch(event.request);
    })
  );
});

self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});
